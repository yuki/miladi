# Load partition table and file system modules
insmod part_gpt
insmod part_msdos
insmod fat
insmod iso9660
insmod ntfs
insmod ntfscomp
insmod exfat
insmod udf

# Use graphics-mode output
if loadfont "${prefix}/fonts/unicode.pf2" ; then
    insmod all_video
    set gfxmode="auto"
    terminal_input console
    terminal_output console
fi

# Enable serial console
insmod serial
insmod usbserial_common
insmod usbserial_ftdi
insmod usbserial_pl2303
insmod usbserial_usbdebug
if serial --unit=0 --speed=115200; then
    terminal_input --append serial
    terminal_output --append serial
fi

# insmod gfxmenu
# if [ -s $prefix/grubenv ]; then
#   load_env
# fi
# if [ "${next_entry}" ] ; then
#    set default="${next_entry}"
#    set next_entry=
#    save_env next_entry
#    set boot_once=true
# else
#    set default="0"
# fi

# if [ x"${feature_menuentry_id}" = xy ]; then
#   menuentry_id_option="--id"
# else
#   menuentry_id_option=""
# fi
#
# export menuentry_id_option

# if [ "${prev_saved_entry}" ]; then
#   set saved_entry="${prev_saved_entry}"
#   save_env saved_entry
#   set prev_saved_entry=
#   save_env prev_saved_entry
#   set boot_once=true
# fi

# function savedefault {
#   if [ -z "${boot_once}" ]; then
#     saved_entry="${chosen}"
#     save_env saved_entry
#   fi
# }

# function load_video {
#   if [ x$feature_all_video_module = xy ]; then
#     insmod all_video
#   else
#     insmod efi_gop
#     insmod efi_uga
#     insmod ieee1275_fb
#     insmod vbe
#     insmod vga
#     insmod video_bochs
#     insmod video_cirrus
#   fi
# }

# if [ x$feature_default_font_path = xy ] ; then
#    font=unicode
# else
# insmod part_gpt
# insmod ext2
# search --no-floppy --fs-uuid --set=root e2a02f9a-1875-4ceb-aed2-df652fef6abb
#     font="/usr/share/grub/unicode.pf2"
# fi

# if loadfont $font ; then
#   set gfxmode=auto
#   load_video
#   insmod gfxterm
#   #set locale_dir=$prefix/locale
#   set lang=es_ES
#   insmod gettext
# fi
terminal_input console
terminal_output gfxterm
insmod part_gpt
insmod ext2
#search --no-floppy --fs-uuid --set=root e2a02f9a-1875-4ceb-aed2-df652fef6abb
insmod gfxmenu
# loadfont /usr/share/grub/themes/starfield/dejavu_10.pf2
# loadfont /usr/share/grub/themes/starfield/dejavu_12.pf2
# loadfont /usr/share/grub/themes/starfield/dejavu_14.pf2
# loadfont /usr/share/grub/themes/starfield/dejavu_16.pf2
# loadfont /usr/share/grub/themes/starfield/dejavu_bold_14.pf2
insmod png
set theme=/boot/grub/themes/manjaro-live/theme.txt
export theme

# function menu_reload {
#     configfile /boot/grub/grub.cfg
# }

# function show_timezones {
#     submenu --class=tz --hotkey=t "tz=${def_timezone}" {# set the timezone above with the editor
#         if [ -n "$1" ];then
#             if [ "$1" = "tz=${def_timezone}" ]; then
#                 default=0
#                 menuentry --class=cancel --hotkey=q "Cancel (${def_timezone})" {menu_reload}
#                 for tt in Africa America Asia Atlantic Australia Etc Europe Pacific; do
#                     submenu --class=tz.${tt} "${tt}" {
#                         menuentry --class=cancel --hotkey=q "Cancel (${def_timezone})" {menu_reload}
#                         source "/boot/grub/tz/${1}"
#                     }
#                 done
#             else
#                 regexp -s newtz '^tz=(.*)' "$1"
#                 if [ -z "$newtz" ]; then
#                     def_timezone="$1"
#                 else
#                     def_timezone="$newtz"
#                 fi
#                 timezone="tz=$def_timezone"
#                 menu_reload
#             fi
#         fi
#     }
# }

# function show_keymaps {
#     submenu --class=kbd --hotkey=k "keytable=${def_keyboard}" {# set the timezone above with the editor
#         if [ -n "$1" ]; then
#             if [ "$1" = "keytable=${def_keyboard}" ]; then
#                 default=0
#                 menuentry --class=cancel --hotkey=q "Cancel (${def_keyboard})" {menu_reload}
#                 source /boot/grub/locales/keyboards
#             else
#                 regexp -s newkey '^keytable=(.*)' "$1"
#                 if [ -z "$newkey" ]; then
#                     def_keyboard="$1"
#                 else
#                     def_keyboard="$newkey"
#                 fi
#                 keyboard="keytable=$def_keyboard"
#                 menu_reload
#             fi
#         fi
#     }
# }

# function show_languages {
#     submenu --hotkey=l --class=lang "lang=${def_bootlang}" {# set the timezone above with the editor
#         if [ -n "$1" ]; then
#             if [ "$1" = "lang=${def_bootlang}" ]; then
#                 default=0
#                 menuentry --class=lang.${def_bootlang} "lang=${def_bootlang}" {menu_reload}
#                 menuentry --class=lang.cs "Čeština" {lang_setup "cs_CZ"}
#                 menuentry --class=lang.da "Dansk" {lang_setup "da_DK"}
#                 submenu --class=lang.de "Deutsch" {
#                     for ll in de_DE de_AT de_BE de_CH de_LI de_LU; do
#                         lang_menu ${ll}
#                     done
#                 }
#                 submenu --class=lang.el "Ελληνικά" {
#                     for ll in el_GR el_CY; do
#                         lang_menu ${ll}
#                     done
#                 }
#                 submenu --class=lang.en "English" {
#                     for ll in en_US en_AG en_AU en_BW en_CA en_DK en_GB en_HK en_IE en_IN en_NG en_NZ en_PH en_SG en_ZA en_ZW; do
#                         lang_menu ${ll}
#                     done
#                 }
#                 submenu --class=lang.es "Español" {
#                     for ll in es_ES es_AR es_BO es_CL es_CO es_CR es_DO es_EC es_GT es_HN es_MX es_NI es_PA es_PE es_PR es_PY es_SV es_US es_UY es_VE; do
#                         lang_menu ${ll}
#                     done
#                 }
#                 submenu --class=lang.fr "Français" {
#                     for ll in fr_FR fr_BE fr_CA fr_CH fr_LU fr_NC; do
#                         lang_menu ${ll}
#                     done
#                 }
#                 menuentry --class=lang.he "עִבְרִית" {lang_setup "he_IL"}
#                 submenu --class=lang.it "Italiano" {
#                     for ll in it_IT it_CH; do
#                         lang_menu ${ll}
#                     done
#                 }
#                 menuentry --class=lang.ja "日本語" {lang_setup "ja_JP"}
#                 submenu --class=lang.nl "Nederlands" {
#                     for ll in nl_NL nl_AW nl_BE; do
#                         lang_menu ${ll}
#                     done
#                 }
#                 menuentry --class=lang.pl "Polski" {lang_setup "pl_PL"}
#                 submenu --class=lang.pt "Português" {
#                     for ll in pt_BR pt_PT; do
#                         lang_menu ${ll}
#                     done
#                 }
#                 menuentry --class=lang.ro "Română" {lang_setup "ro_RO"}
#                 submenu --class=lang.ru "Русский" {
#                     for ll in ru_RU ru_UA;do
#                         lang_menu ${ll}
#                     done
#                 }
#                 submenu --class=lang.zh "中文" {
#                     for ll in zh_CN zh_TW; do
#                         lang_menu ${ll}
#                     done
#                 }
#             else
#                 regexp -s newlang '^lang=(.*)' "$1"
#                 if [ -z "$newlang" ]; then
#                     def_bootlang="$1"
#                 else
#                     def_bootlang="$newlang"
#                 fi
#                 bootlang="lang=$def_bootlang"
#                 if [ -f /boot/grub/locales/${def_bootlang} ]; then
#                     source /boot/grub/locales/${def_bootlang}
#                 fi
#                 menu_reload
#             fi
#         fi
#     }
# }

# function boot_menu {
#     if [ "${hwclock}" = "utc=yes" ]; then
#         class="utc"
#         title="utc"
#         clockset=""
#     elif [ "${timezone}${bootlang}" = "" ]; then
#         class="unset"
#         title="utc"
#         clockset=""
#     else
#         title="${def_timezone}"
#         class="tz.${def_timezone}"
#         clockset="utc=yes"
#     fi
#     min2d="$MINUTE"
#     if regexp '(^.$)' "$min2d"; then
#         min2d="0${min2d}"
#     fi
#     hour2d="$HOUR"
#     if regexp '(^.$)' "$hour2d"; then
#         hour2d="0${hour2d}"
#     fi
#     menuentry --class=tz.$class --hotkey=u "System time $hour2d:$min2d $title " "$clockset" {
#         hwclock="$2"
#         menu_reload
#     }
#     show_timezones
#     show_keymaps
#     show_languages
#     default=4
# }

# function boot_defaults {
#     source /boot/grub/defaults.cfg
# }


# Get a human readable platform identifier
if [ "${grub_platform}" == 'efi' ]; then
    archiso_platform='UEFI'
    if [ "${grub_cpu}" == 'x86_64' ]; then
        archiso_platform="x64 ${archiso_platform}"
    elif [ "${grub_cpu}" == 'i386' ]; then
        archiso_platform="IA32 ${archiso_platform}"
    else
        archiso_platform="${grub_cpu} ${archiso_platform}"
    fi
elif [ "${grub_platform}" == 'pc' ]; then
    archiso_platform='BIOS'
else
    archiso_platform="${grub_cpu} ${grub_platform}"
fi

# Set default menu entry
default=archlinux
timeout=15
timeout_style=menu


# Menu entries

menuentry "AAAAAA Arch Linux install medium (%ARCH%, ${archiso_platform})" --class arch --class gnu-linux --class gnu --class os --id 'archlinux' {
    set gfxpayload=keep
    linux /%INSTALL_DIR%/boot/%ARCH%/vmlinuz-linux archisobasedir=%INSTALL_DIR% archisosearchuuid=%ARCHISO_UUID%
    initrd /%INSTALL_DIR%/boot/%ARCH%/initramfs-linux.img
}

menuentry "Arch Linux install medium with speakup screen reader (%ARCH%, ${archiso_platform})" --hotkey s --class arch --class gnu-linux --class gnu --class os --id 'archlinux-accessibility' {
    set gfxpayload=keep
    linux /%INSTALL_DIR%/boot/%ARCH%/vmlinuz-linux archisobasedir=%INSTALL_DIR% archisosearchuuid=%ARCHISO_UUID% accessibility=on
    initrd /%INSTALL_DIR%/boot/%ARCH%/initramfs-linux.img
}


if [ "${grub_platform}" == 'efi' -a "${grub_cpu}" == 'x86_64' -a -f '/boot/memtest86+/memtest.efi' ]; then
    menuentry 'Run Memtest86+ (RAM test)' --class memtest86 --class memtest --class gnu --class tool {
        set gfxpayload=800x600,1024x768
        linux /boot/memtest86+/memtest.efi
    }
fi
if [ "${grub_platform}" == 'pc' -a -f '/boot/memtest86+/memtest' ]; then
    menuentry 'Run Memtest86+ (RAM test)' --class memtest86 --class memtest --class gnu --class tool {
        set gfxpayload=800x600,1024x768
        linux /boot/memtest86+/memtest
    }
fi
if [ "${grub_platform}" == 'efi' ]; then
    if [ "${grub_cpu}" == 'x86_64' -a -f '/shellx64.efi' ]; then
        menuentry 'UEFI Shell' --class efi {
            chainloader /shellx64.efi
        }
    elif [ "${grub_cpu}" == "i386" -a -f '/shellia32.efi' ]; then
        menuentry 'UEFI Shell' --class efi {
            chainloader /shellia32.efi
        }
    fi

    menuentry 'UEFI Firmware Settings' --id 'uefi-firmware' {
        fwsetup
    }
fi

# boot_defaults

# for kopt in "${clinput}" "${bootlang}" "${keyboard}" "${timezone}" "${hwclock}" "${auto}"; do
#     if [ -n "${kopt}" ]; then
#         kopts="${kopts} ${kopt}"
#     fi
# done
# if [ -n "${bootlang}${keyboard}${timezone}" ]; then
#     koptsok="true"
# fi

# boot_menu

menuentry 'System shutdown' --class shutdown --class poweroff {
    echo 'System shutting down...'
    halt
}

menuentry 'System restart' --class reboot --class restart {
    echo 'System rebooting...'
    reboot
}


# GRUB init tune for accessibility
play 600 988 1 1319 4
