# Load partition table and file system modules
insmod part_gpt
insmod part_msdos
insmod fat
insmod iso9660
insmod ntfs
insmod ntfscomp
insmod exfat
insmod udf

# Use graphics-mode output
if loadfont "${prefix}/fonts/unicode.pf2" ; then
    insmod all_video
    set gfxmode="auto"
    terminal_input console
    terminal_output console
fi

# Enable serial console
insmod serial
insmod usbserial_common
insmod usbserial_ftdi
insmod usbserial_pl2303
insmod usbserial_usbdebug
if serial --unit=0 --speed=115200; then
    terminal_input --append serial
    terminal_output --append serial
fi

terminal_input console
terminal_output gfxterm
insmod part_gpt
insmod ext2
insmod gfxmenu
insmod png
set theme=/boot/grub/themes/manjaro-live/theme.txt
export theme


# Get a human readable platform identifier
if [ "${grub_platform}" == 'efi' ]; then
    archiso_platform='UEFI'
    if [ "${grub_cpu}" == 'x86_64' ]; then
        archiso_platform="x64 ${archiso_platform}"
    elif [ "${grub_cpu}" == 'i386' ]; then
        archiso_platform="IA32 ${archiso_platform}"
    else
        archiso_platform="${grub_cpu} ${archiso_platform}"
    fi
elif [ "${grub_platform}" == 'pc' ]; then
    archiso_platform='BIOS'
else
    archiso_platform="${grub_cpu} ${grub_platform}"
fi

# Set default menu entry
default=archlinux
timeout=15
timeout_style=menu



export loaded
export koptsok
export disable_gfxterm
export bootarch
export firmware
export firmware_found
export from
export fromiso
export bootlang
export keyboard
export timezone
export hwclock
export def_bootlang
export language
export def_keyboard
export def_timezone
export menu_color_normal
export menu_color_highlight
export pager

function menu_help {
    check_help
    grub_help
}

function check_help {
    if [ -z "${koptsok}" ]; then
        echo $"WARNING: nothing set"
        echo $" System will use defaults"
        echo  "  American English <> utc clock <> us "$"keyboard <> free drivers"
        echo ""
    fi
}

function kopts_help {
    echo $"Example boot command line arguments:"
    echo $" Setup"
    echo  "  lang=<language>_<variant> keytable=<layout>         tz=<region>/<city>"
    echo  "  hostname=<name>           username=<name>"
    echo $" Kernel"
    echo  "  blacklist=<module>"
    echo $" Video"
    echo  "  <module>.modeset=0"
    echo  "  radeon.modeset=0          nouveau.modeset=0         i915.modeset=0"
    echo  "  video=VGA-1:1920x1080e    DVI-0:800x600"
    echo ""
}

function grub_help {
    echo $"To use the menu:"
    echo $" press up or down to move between items"
    echo $" press enter or right to select the item"
    echo $" press e to edit the current item"
    echo $" press c to go to the grub command line"
    echo ""
    echo $"Simply edit the first line of most menus to control them"
    echo $"Select or edit the blank line to enter command line arguments"
    echo ""
}

function menu_reload {
    configfile /boot/grub/grub.cfg
}

function menu_continue {
    echo -n $"Press Enter to continue"
    read mcont
}

function prompt {
    echo -n "> "
}

function is_efi {
    if [ "${grub_platform}" = "efi" ]; then
        return 0
    fi
    return 1
}

function efi_detect {
    if is_efi ; then
        submenu --class=find.efi --hotkey=f "Detect EFI bootloaders" {
            efi_found=false

            for efi in (*,gpt*)/efi/*/*.efi (*,gpt*)/efi/*/*/*.efi (*,gpt*)/*.efi (*,gpt*)/*/*.efi ; do
                regexp --set=1:efi_device '^\((.*)\)/' "${efi}"
                if [ -e "${efi}" ]; then
                    efi_found=true

                    menuentry --class=efi "${efi}" "${efi_device}" {
                        root="${2}"
                        chainloader "${1}"
                    }
                fi
            done

            if [ "${efi_found}" != true ]; then
                menuentry --hotkey=q --class=find.none "No EFI files detected." {menu_reload}
            else
                menuentry --hotkey=q --class=cancel "Cancel" {menu_reload}
            fi
        }
    fi
}

function memtest_detect {
    if ! is_efi; then
        if [ -f /boot/memtest ]; then
            menuentry --class=memtest --hotkey=m "Memory Test" {linux16 /boot/$1}
        fi
    fi
}

function lang_setup {
    source /boot/grub/locales/${1}
    menu_reload
}

function show_languages {
    submenu --hotkey=l --class=lang "lang=${language}" {# set the timezone above with the editor
        if [ -n "$1" ]; then
            if [ "$1" = "lang=${language}" ]; then
                default=0
                # menuentry --class=lang.${def_bootlang} "lang=${def_bootlang}" {menu_reload}
                menuentry --class=lang.es "Castellano" {lang_setup "es_ES"}
                menuentry --class=lang.eu "Euskara" {lang_setup "eu_ES"}
                menuentry --class=lang.en "English" {lang_setup "en_US"}
            else
                regexp -s newlang '^lang=(.*)' "$1"
                if [ -z "$newlang" ]; then
                    def_bootlang="$1"
                else
                    def_bootlang="$newlang"
                fi
                bootlang="lang=$def_bootlang"
                if [ -f /boot/grub/locales/${def_bootlang} ]; then
                    source /boot/grub/locales/${def_bootlang}
                fi
                menu_reload
            fi
        fi
    }
}

function boot_menu {
    show_languages
    default=1
}

function boot_defaults {
    source /boot/grub/defaults.cfg
}

function grub_reboot {
    menuentry " " {true}
    menuentry --class=reboot "Reboot!" {reboot}
}

function grub_bios_installed {
    if ! is_efi;  then
        menuentry "" {true}
        menuentry --class=manjaro "Installed BIOS-System on $installed" {exit}
    fi
}

function grub_efi_installed {
    if is_efi; then
        menu "" {true}
        menu --class=manjaro "Installed EFI-System on $installed" {exit}
    fi
}


function check {
    cliname="$1"
    varname="$2"
    if [ "${optname}" != "${cliname}" ]; then
        return 1
    fi
    if [ -z "$varname" ]; then
        varname="${cliname}"
    fi
    if [ -z "${optval}" ]; then
        eval ${varname}="${cliname}"
    else
        eval ${varname}="${cliname}=${optval}"
        if [ "${optname}" = "lang" ]; then
            lang_setup ${optval}
        elif [ "${optname}" = "keytable" ]; then
            def_keyboard="${optval}"
        elif [ "${optname}" = "tz" ]; then
            def_timezone="${optval}"
        fi
    fi
    return 0
}

function checkinput {
    newinput="$1"
    newoutput=""
    for newcli in ${newinput} ; do
    optname=""
    optval=""
    optdone=""
    regexp -s optname '^(.+)=.*$' "${newcli}"
    if [ -z "${optname}" ]; then
        optname="${newcli}"
    else
        regexp -s optval '^.+=(.*)$' "${newcli}"
    fi
    for tocheck in "lang bootlang" "keytable keyboard" "tz timezone" "utc hwclock"; do
        if check $tocheck ; then
            optdone="Y"
            break
        fi
    done
    if [ -z "${optdone}" ]; then
        if [ -z "${newoutput}" ]; then
            newoutput="${newcli}"
        else
            newoutput="${newoutput} ${newcli}"
        fi
    fi
    done
}

function new2cli {
    newinput="$1"
    if [ -n "$newinput" ]; then
        checkinput "$newinput"
        if [ -n "${newoutput}" ]; then
            newinput="${newoutput}"
            if [ -n "$clinput" ]; then
                clinput="$clinput $newinput"
            else
                clinput="$newinput"
            fi
            export clinput
        fi
    fi
}

function getargs {
    args=""
    for a in $@; do
        if [ -n "${a}" ]; then
            args="${args} ${a}"
        fi
    done
}

function bootcheck {
    getargs
}

pager=1

insmod regexp
insmod datehook
if ! is_efi; then
    insmod part_gpt
fi

if is_efi; then
    insmod efi_gop
    insmod efi_uga
fi

if [ -z "${loaded}" ]; then
    iscd=""
    auto=""
    regexp -s iscd '^(cd)' "${root}"
    if [ "${iscd}" != "cd" -a -e (cd) ]; then
        probe -s cdp -u cd
        probe -s hdp -u $root
        if [ -n "$cdp" -a "$cdp" = "$hdp" ]; then
            iscd="cd"
        fi
    fi
    if [ "${root}" != "hd96" -a "${iscd}" != "cd" ]; then
        auto="${auto}"
    fi
    source /boot/grub/variable.cfg
    loaded=true

    if keystatus --shift; then
        disable_gfxterm=true
    fi

    if [ "${disable_gfxterm}" != "true" ]; then
        if loadfont /boot/grub/unicode.pf2 ; then
            if [ -z "$gfxmode" ] ; then
                gfxmode=1024x768,auto # 1280x1024,1024x768,800x600,640x480 possible value
                gfxpayload=keep
            fi
            if keystatus --ctrl; then
                gfxok=""
                pager=0
                while [ -z "$gfxok" ]; do
                    echo "gfxmode=$gfxmode"
                    echo "Input new mode or Enter to confirm"
                    prompt
                    read gfxmodein
                    if [ -n "$gfxmodein" ]; then
                        gfxmode="$gfxmodein"
                        echo ""
                    else
                        gfxok="true"
                    fi
                done
            fi
            insmod all_video
            insmod gfxterm
            if terminal_output --append gfxterm; then
                terminal_output --remove console
            else
                disable_gfxterm=true
            fi
        else
            disable_gfxterm=true
        fi
    fi

    if [ "${disable_gfxterm}" != "true"  -a -f "${grub_theme}" ]; then
        insmod gfxmenu
        themedir=""
        regexp -s themedir '^(.*)/.*$' "${grub_theme}"
        for themefont in $themedir/*.pf2 $themedir/f/*.pf2; do
            if [ -f "${themefont}" ]; then
                loadfont "${themefont}"
            fi
        done
        for imagetype in jpg jpeg png tga; do
            for themeimage in ${themedir}/*.${imagetype}; do
                if [ -f "${themeimage}" ]; then
                    if [ "${imagetype}" = "jpg" ]; then
                        insmod jpeg
                    else
                        insmod $imagetype
                    fi
                fi
            done
        done
        theme=${grub_theme}
        export theme
    fi

    menu_color_normal=cyan/blue
    menu_color_highlight=white/blue

    if [ -n "${iso_path}" ]; then
        auto="img_dev=/dev/disk/by-uuid/${rootuuid} img_loop=${iso_path}"
    fi
    
    export auto
fi

boot_defaults

for kopt in "${clinput}" "${bootlang}" "${keyboard}" "${timezone}" "${hwclock}" "${auto}"; do
    if [ -n "${kopt}" ]; then
        kopts="${kopts} ${kopt}"
    fi
done
if [ -n "${bootlang}${keyboard}${timezone}" ]; then
    koptsok="true"
fi

boot_menu









# Menu entries

title=""
for kopt in $kopts; do
    if [ -n "$title" ] ; then
        title="$title $kopt";
    else
        title="$kopt";
    fi;
done

menuentry "Arch Linux install medium (%ARCH%, ${archiso_platform})" --class="arch" --class="gnu-linux" --id='archlinux' "$title" {
    set gfxpayload=keep
    linux /%INSTALL_DIR%/boot/%ARCH%/vmlinuz-linux archisobasedir=%INSTALL_DIR% archisosearchuuid=%ARCHISO_UUID% $title
    initrd /%INSTALL_DIR%/boot/%ARCH%/initramfs-linux.img
}

menuentry "Arch Linux install medium with speakup screen reader (%ARCH%, ${archiso_platform})" --hotkey s --class arch --class gnu-linux --class gnu --class os --id 'archlinux-accessibility' {
    set gfxpayload=keep
    linux /%INSTALL_DIR%/boot/%ARCH%/vmlinuz-linux archisobasedir=%INSTALL_DIR% archisosearchuuid=%ARCHISO_UUID% accessibility=on
    initrd /%INSTALL_DIR%/boot/%ARCH%/initramfs-linux.img
}


if [ "${grub_platform}" == 'efi' -a "${grub_cpu}" == 'x86_64' -a -f '/boot/memtest86+/memtest.efi' ]; then
    menuentry 'Run Memtest86+ (RAM test)' --class memtest86 --class memtest --class gnu --class tool {
        set gfxpayload=800x600,1024x768
        linux /boot/memtest86+/memtest.efi
    }
fi
if [ "${grub_platform}" == 'pc' -a -f '/boot/memtest86+/memtest' ]; then
    menuentry 'Run Memtest86+ (RAM test)' --class memtest86 --class memtest --class gnu --class tool {
        set gfxpayload=800x600,1024x768
        linux /boot/memtest86+/memtest
    }
fi
if [ "${grub_platform}" == 'efi' ]; then
    if [ "${grub_cpu}" == 'x86_64' -a -f '/shellx64.efi' ]; then
        menuentry 'UEFI Shell' --class efi {
            chainloader /shellx64.efi
        }
    elif [ "${grub_cpu}" == "i386" -a -f '/shellia32.efi' ]; then
        menuentry 'UEFI Shell' --class efi {
            chainloader /shellia32.efi
        }
    fi

    menuentry 'UEFI Firmware Settings' --id 'uefi-firmware' {
        fwsetup
    }
fi

menuentry 'System shutdown' --class shutdown --class poweroff {
    echo 'System shutting down...'
    halt
}

menuentry 'System restart' --class reboot --class restart {
    echo 'System rebooting...'
    reboot
}


if [ -n "$clinput" ]; then
    menuentry --class=edit "$clinput" {
        if [ -n "$1" ]; then
            clinput="$@"
        else
            unset clinput
        fi
        menu_reload
    }
fi
menuentry --class=type --hotkey=tab "Edit boot options" {# set arguments above with the editor
    getargs $@
    pager=0
    if [ -z "$args" ]; then
        check_help
        kopts_help
        echo $"Input command line options, press Enter to continue"
        prompt
        read newinput
    else
        newinput="$args"
    fi
    new2cli "$newinput"
    pager=1
    menu_reload
}
menuentry --hotkey=h --class=help "Help" {
    pager=0
    menu_help
    menu_continue
    pager=1
}
efi_detect
memtest_detect
search --no-floppy --file /etc/issue --set installed
grub_bios_installed
grub_efi_installed
grub_reboot


# GRUB init tune for accessibility
play 600 988 1 1319 4
